{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// 表单验证——密码\nconst validPassword = (rule, value, callback) => {\n  const reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{4,15}$/;\n\n  if (!reg.test(value)) {\n    callback(new Error('密码必须是由4-15位字母+数字组合'));\n  } else {\n    callback();\n  }\n};\n\nexport default {\n  name: 'IdChange',\n  props: {\n    tableData: Array\n  },\n  data: function () {\n    return {\n      search: '',\n      dialogTitle: '',\n      editDialogVisible: false,\n      isAdd: false,\n      id: '',\n      rules: {\n        userid: [{\n          required: true,\n          message: '请输入用户ID',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 20,\n          message: '长度在 1 到 20 个字符',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          validator: validPassword,\n          trigger: 'blur'\n        }]\n      },\n      form: {\n        userid: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    // 提交表单\n    submitForm(form) {\n      this.$refs[form].validate(valid => {\n        if (valid) {\n          this.editDialogVisible = false;\n\n          if (this.isAdd === true) {\n            this.isAdd = false; // 发送请求，让数据库添加销售人员ID\n\n            const params = new URLSearchParams();\n            params.append('userid', this.form.userid);\n            params.append('password', this.form.password);\n            this.$http.post('/api/salesmanID/addID', params).then(() => {\n              // 向父组件请求更新数据\n              this.$emit('getData');\n              this.$message({\n                message: '添加成功',\n                type: 'success'\n              });\n            }).catch(error => {\n              console.log(error);\n              this.$message.error('添加失败');\n            });\n          } else {\n            // 发送请求，让数据库修改销售人员ID\n            const params = new URLSearchParams();\n            params.append('userid', this.form.userid);\n            params.append('password', this.form.password);\n            params.append('id', this.id);\n            this.$http.put('/api/salesmanID/updateID', params).then(() => {\n              // 向父组件请求更新数据\n              this.$emit('getData');\n              this.$message({\n                message: '编辑成功',\n                type: 'success'\n              });\n            }).catch(error => {\n              console.log(error);\n              this.$message.error('编辑失败');\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n\n    // 关闭表单\n    cancel(done) {\n      this.$confirm('确认关闭？').then(_ => {\n        this.isAdd = false;\n        this.editDialogVisible = false;\n        done();\n      }).catch(_ => {});\n    },\n\n    handleClose(done) {\n      this.$confirm('确认关闭？').then(_ => {\n        this.isAdd = false;\n        done();\n      }).catch(_ => {});\n    },\n\n    // 添加\n    handleAdd() {\n      // 初始化表单\n      this.dialogTitle = '添加';\n      this.form.userid = '';\n      this.form.password = '';\n      this.editDialogVisible = true;\n      this.isAdd = true;\n    },\n\n    // 编辑\n    handleEdit(row) {\n      // 将表格数据传入表单\n      this.dialogTitle = '编辑';\n      this.form.userid = row.userid;\n      this.form.password = row.password;\n      this.id = row.userid;\n      this.editDialogVisible = true;\n    },\n\n    // 删除\n    handleDelete(row) {\n      this.$confirm('此操作将永久删除该项, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 发送请求，让数据库删除数据\n        const params = new URLSearchParams();\n        params.append('userid', row.userid);\n        this.$http.post('/api/salesmanID/deleteID', params).then(() => {\n          // 向父组件请求更新数据\n          this.$emit('getData');\n          this.$message({\n            message: '删除成功',\n            type: 'success'\n          });\n        }).catch(error => {\n          console.log(error);\n          this.$message.error('删除失败');\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;AA2EA;AACA;EACA;;EACA;IACAA;EACA,CAFA,MAEA;IACAA;EACA;AACA,CAPA;;AAQA;EACAC,gBADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACA;MACAC,UADA;MAEAC,eAFA;MAGAC,wBAHA;MAIAC,YAJA;MAKAC,MALA;MAMAC;QACAC,SACA;UAAAC;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA,CADA;QAKAG,WACA;UAAAL;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAI;UAAAJ;QAAA,CAFA;MALA,CANA;MAgBAK;QACAR,UADA;QAEAM;MAFA;IAhBA;EAqBA,CA3BA;EA4BAG;IACA;IACAC;MACA;QACA;UACA;;UACA;YACA,mBADA,CAEA;;YACA;YACAC;YACAA;YACA,iDACAC,IADA,CACA;cACA;cACA;cACA;gBACAV,eADA;gBAEAW;cAFA;YAIA,CARA,EASAC,KATA,CASAC;cACAC;cACA;YACA,CAZA;UAaA,CAnBA,MAmBA;YACA;YACA;YACAL;YACAA;YACAA;YACA,mDACAC,IADA,CACA;cACA;cACA;cACA;gBACAV,eADA;gBAEAW;cAFA;YAIA,CARA,EASAC,KATA,CASAC;cACAC;cACA;YACA,CAZA;UAaA;QACA,CAzCA,MAyCA;UACA;QACA;MACA,CA7CA;IA8CA,CAjDA;;IAkDA;IACAC;MACA,uBACAL,IADA,CACAM;QACA;QACA;QACAC;MACA,CALA,EAMAL,KANA,CAMAI,OANA;IAOA,CA3DA;;IA4DAE;MACA,uBACAR,IADA,CACAM;QACA;QACAC;MACA,CAJA,EAKAL,KALA,CAKAI,OALA;IAMA,CAnEA;;IAoEA;IACAG;MACA;MACA;MACA;MACA;MACA;MACA;IACA,CA5EA;;IA6EA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA,CArFA;;IAsFA;IACAC;MACA;QACAC,uBADA;QAEAC,sBAFA;QAGAZ;MAHA,GAIAD,IAJA,CAIA;QACA;QACA;QACAD;QACA,oDACAC,IADA,CACA;UACA;UACA;UACA;YACAV,eADA;YAEAW;UAFA;QAIA,CARA,EASAC,KATA,CASAC;UACAC;UACA;QACA,CAZA;MAaA,CArBA,EAqBAF,KArBA,CAqBA;QACA;UACAD,YADA;UAEAX;QAFA;MAIA,CA1BA;IA2BA;;EAnHA;AA5BA","names":["callback","name","props","tableData","data","search","dialogTitle","editDialogVisible","isAdd","id","rules","userid","required","message","trigger","min","max","password","validator","form","methods","submitForm","params","then","type","catch","error","console","cancel","_","done","handleClose","handleAdd","handleEdit","handleDelete","confirmButtonText","cancelButtonText"],"sourceRoot":"src/views/admin/id","sources":["change.vue"],"sourcesContent":["<template>\n    <el-container>\n        <el-main>\n          <!--修改框-->\n          <el-dialog\n          :title=dialogTitle\n          :visible.sync=\"editDialogVisible\"\n          :before-close=\"handleClose\"\n          width=\"50%\">\n              <!--表单-->\n              <el-form :model=\"form\" :rules=\"rules\" ref=\"form\" label-width=\"100px\">\n                  <el-form-item label=\"销售人员ID\" prop=\"userid\">\n                      <el-input v-model=\"form.userid\"></el-input>\n                  </el-form-item>\n                  <el-form-item label=\"密码\" prop=\"password\">\n                      <el-input v-model=\"form.password\"></el-input>\n                  </el-form-item>\n              </el-form>\n              <!--确定与取消-->\n              <span slot=\"footer\" class=\"dialog-footer\">\n                  <el-button @click=\"cancel()\">取 消</el-button>\n                  <el-button type=\"primary\" @click=\"submitForm('form')\">确 定</el-button>\n              </span>\n          </el-dialog>\n\n          <!--表格-->\n          <el-table\n          :data=\"tableData.filter(data => !search || data.userid.toLowerCase().includes(search.toLowerCase()))\"\n          max-height = \"600\"\n          border\n          style=\"width: 100%\">\n              <!--每行输出的内容-->\n              <el-table-column\n              label=\"销售人员ID\"\n              width=\"200\"\n              prop=\"userid\">\n              </el-table-column>\n              <el-table-column\n              label=\"密码\"\n              width=\"300\"\n              prop=\"password\">\n              </el-table-column>\n              <el-table-column\n              fixed=\"right\"\n              width=\"280\"\n              align=\"center\">\n                  <!--搜索框，注意一定要#header，不能写v-slot，不然有显示问题-->\n                  <template #header>\n                      <el-button\n                      size=\"mini\"\n                      type=\"primary\"\n                      class=\"add\"\n                      @click=\"handleAdd()\">添加</el-button>\n                      <el-input\n                      v-model=\"search\"\n                      placeholder=\"输入ID搜索\"\n                      style=\"width: 70%\"\n                      ></el-input>\n                  </template>\n                  <!--编辑与删除按钮-->\n                  <template slot-scope=\"scope\">\n                      <el-button\n                      type=\"primary\"\n                      @click=\"handleEdit(scope.row)\">编辑</el-button>\n                      <el-button\n                      type=\"danger\"\n                      @click=\"handleDelete(scope.row)\">删除</el-button>\n                  </template>\n              </el-table-column>\n          </el-table>\n        </el-main>\n    </el-container>\n</template>\n\n<script>\n// 表单验证——密码\nconst validPassword = (rule, value, callback) => {\n  const reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{4,15}$/\n  if (!reg.test(value)) {\n    callback(new Error('密码必须是由4-15位字母+数字组合'))\n  } else {\n    callback()\n  }\n}\nexport default {\n  name: 'IdChange',\n  props: {\n    tableData: Array\n  },\n  data: function () {\n    return {\n      search: '',\n      dialogTitle: '',\n      editDialogVisible: false,\n      isAdd: false,\n      id: '',\n      rules: {\n        userid: [\n          { required: true, message: '请输入用户ID', trigger: 'blur' },\n          { min: 1, max: 20, message: '长度在 1 到 20 个字符', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          { validator: validPassword, trigger: 'blur' }\n        ]\n      },\n      form: {\n        userid: '',\n        password: ''\n      }\n    }\n  },\n  methods: {\n    // 提交表单\n    submitForm (form) {\n      this.$refs[form].validate((valid) => {\n        if (valid) {\n          this.editDialogVisible = false\n          if (this.isAdd === true) {\n            this.isAdd = false\n            // 发送请求，让数据库添加销售人员ID\n            const params = new URLSearchParams()\n            params.append('userid', this.form.userid)\n            params.append('password', this.form.password)\n            this.$http.post('/api/salesmanID/addID', params)\n              .then(() => {\n                // 向父组件请求更新数据\n                this.$emit('getData')\n                this.$message({\n                  message: '添加成功',\n                  type: 'success'\n                })\n              })\n              .catch((error) => {\n                console.log(error)\n                this.$message.error('添加失败')\n              })\n          } else {\n            // 发送请求，让数据库修改销售人员ID\n            const params = new URLSearchParams()\n            params.append('userid', this.form.userid)\n            params.append('password', this.form.password)\n            params.append('id', this.id)\n            this.$http.put('/api/salesmanID/updateID', params)\n              .then(() => {\n                // 向父组件请求更新数据\n                this.$emit('getData')\n                this.$message({\n                  message: '编辑成功',\n                  type: 'success'\n                })\n              })\n              .catch((error) => {\n                console.log(error)\n                this.$message.error('编辑失败')\n              })\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    // 关闭表单\n    cancel (done) {\n      this.$confirm('确认关闭？')\n        .then(_ => {\n          this.isAdd = false\n          this.editDialogVisible = false\n          done()\n        })\n        .catch(_ => {})\n    },\n    handleClose (done) {\n      this.$confirm('确认关闭？')\n        .then(_ => {\n          this.isAdd = false\n          done()\n        })\n        .catch(_ => {})\n    },\n    // 添加\n    handleAdd () {\n      // 初始化表单\n      this.dialogTitle = '添加'\n      this.form.userid = ''\n      this.form.password = ''\n      this.editDialogVisible = true\n      this.isAdd = true\n    },\n    // 编辑\n    handleEdit (row) {\n      // 将表格数据传入表单\n      this.dialogTitle = '编辑'\n      this.form.userid = row.userid\n      this.form.password = row.password\n      this.id = row.userid\n      this.editDialogVisible = true\n    },\n    // 删除\n    handleDelete (row) {\n      this.$confirm('此操作将永久删除该项, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 发送请求，让数据库删除数据\n        const params = new URLSearchParams()\n        params.append('userid', row.userid)\n        this.$http.post('/api/salesmanID/deleteID', params)\n          .then(() => {\n            // 向父组件请求更新数据\n            this.$emit('getData')\n            this.$message({\n              message: '删除成功',\n              type: 'success'\n            })\n          })\n          .catch((error) => {\n            console.log(error)\n            this.$message.error('删除失败')\n          })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n    }\n  }\n\n}\n\n</script>\n\n<style scoped>\n  .add {\n    margin-right: 8px;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}